http://wiki.ros.org/cn
# 初级
=====================1.安装并配置ROS环境========================
-------------------安装--------------------------------
参考：http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment
Configure your Ubuntu repositories
Configure your Ubuntu repositories to allow "restricted," "universe," and "multiverse." You can follow the Ubuntu guide for instructions on doing this. 
??????????????????????????????????????????????????????????????
https://www.ncnynl.com/archives/201801/2273.html
-----ubuntu18.04-------
$ sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
$ sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
$ sudo apt update

# Desktop-Full Install: (Recommended) : ROS, rqt, rviz, robot-generic libraries, 2D/3D simulators # and 2D/3D perception
$ sudo apt install python-rosdep
$ sudo rosdep init
$ rosdep update
$ sudo apt install ros-melodic-desktop-full
$ echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
//$ source /opt/ros/melodic/setup.bash
$ sudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential

--------------------管理环境--------------------------
$ export | grep ROS
# ROS会帮你自动生成这些‘setup.*sh’文件，通过以下方式生成并保存在不同地方：
# 通过类似apt的软件包管理器安装ROS软件包时会生成setup.*sh文件。
# 在rosbuild workspaces中通过类似rosws的工具生成。（不推荐）
# 在编译 或 安装 catkin 软件包时自动生成。
# source /opt/ros/<distro>/setup.bash
# 每次执行终端时都要执行上面的命令,可以事先在.bashrc文件中添加这条命令，这样当你每次登录后系统已经帮你执行这些命令配置好环境。
------------------创建ROS工作空间---------------------
$ mkdir -p ~/catkin_ws/src
$ cd ~/catkin_ws/src
# 即使这个工作空间是空的（在'src'目录中没有任何软件包，只有一个CMakeLists.txt链接文件），你依然可以编译它?
$ cd ~/catkin_ws/
$ catkin_make
# 将当前工作空间设置在ROS工作环境的最顶层
$ source devel/setup.bash
# 要想保证工作空间已配置正确需确保ROS_PACKAGE_PATH环境变量包含你的工作空间目录，采用以下命令查看：
$ echo $ROS_PACKAGE_PATH
===================2.ROS文件系统介绍=======================
# roscd、rosls和rospack
$ sudo apt-get install ros-<distro>-ros-tutorials
- Packages: 软件包，是ROS应用程序代码的组织单元，每个软件包都可以包含程序库、可执行文件、脚本或者其它手动创建的东西。
- Manifest (package.xml): 清单，是对于'软件包'相关信息的描述,用于定义软件包相关元信息之间的依赖关系，这些信息包括版本、维护者和许可协议等。
$ rospack find [包名称 | roscpp]  # rospack允许你获取软件包的有关信息
$ roscd [本地包名称[/子目录 | roscpp]]  # roscd是rosbash命令集中的一部分，它允许你直接切换(cd)工作目录到某个软件包或者软件包集当中。roscd只能切换到那些路径已经包含在ROS_PACKAGE_PATH环境变量中的软件包
$ roscd log	#可以切换到ROS保存日记文件的目录下。
$ rosls [本地包名称[/子目录]]	# rosls是rosbash命令集中的一部分，它允许你直接按软件包的名称而不是绝对路径执行ls命令（罗列目录）。

=====================3.创建ROS程序包=======================
# catkin、rospack
【一个catkin程序包必须符合以下要求：
- 该程序包必须包含catkin compliant package.xml文件（http://wiki.ros.org/catkin/package.xml）
	- 这个package.xml文件提供有关程序包的元信息。 
- 程序包必须包含一个catkin 版本的CMakeLists.txt文件（http://wiki.ros.org/catkin/CMakeLists.txt），而Catkin metapackages中必须包含一个对CMakeList.txt文件的引用。
- 每个目录下只能有一个程序包。
	- 这意味着在同一个目录下不能有嵌套的或者多个程序包存在。 】
# 创建一个catkin程序包
$ cd ~/catkin_ws/src
$ catkin_create_pkg beginner_tutorials std_msgs rospy roscpp	# 使用catkin_create_pkg <package_name> [depend1] [depend2] [depend3]命令来创建一个名为'beginner_tutorials'的新程序包，这个程序包依赖于std_msgs、roscpp和rospy
# 程序包依赖关系
$ rospack depends1 beginner_tutorials	# 查看一级依赖包,保存在package.xml中
$ rospack depends1 rospy	# 查看间接依赖
$ rospack depends beginner_tutorials	# 查看所有依赖包
# 自定义自己的程序包
# 1.package.xml
<description>:描述标签
<maintainer>:维护者标签及email
<license>:许可标签
<build_depend/buildtool_depend/exec_depend/test_depend>:依赖项标签
# 2.CMakeLists.txt
====================4.编译ROS程序包========================
# catkin_make是在CMake标准工作流程中依次调用了cmake 和 make。
# 在catkin工作空间下,默认源码在src中，否则需要指定位置
$ catkin_make [--source my_src] [make_targets] [-DCMAKE_VARIABLES=...]
# 编译自己的代码
# c++：http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29
# python：http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29

===================5.理解ROS节点===========================
# roscore、rosnode和 rosrun
- 图概念概述
    + Nodes:节点,一个节点即为一个可执行文件，它可以通过ROS与其它节点进行通信。
    + Messages:消息，消息是一种ROS数据类型，用于订阅或发布到一个话题。
    + Topics:话题,节点可以发布消息到话题，也可以订阅话题以接收消息。
    + Master:节点管理器，ROS名称服务 (比如帮助节点找到彼此)。
    + rosout: ROS中相当于stdout/stderr。
    + roscore: 主机+ rosout + 参数服务器 (参数服务器会在后面介绍)。 


ROS客户端库允许使用不同编程语言编写的节点之间互相通信:
rospy = python 客户端库/roscpp = c++ 客户端库 

$ roscore		# 在运行所有ROS程序前首先要运行的命令 
$ rosnode list		# rosnode 显示当前运行的ROS节点信息。rosnode list 指令列出活跃的节点
# rosout:节点用于收集和记录节点调试输出信息，所以它总是在运行的
$ rosnode info /rosout	# 命令返回的是关于一个特定节点的信息
$ rosrun turtlesim turtlesim_node	#  rosrun [package_name] [node_name]允许你使用包名直接运行一个包内的节点(而不需要知道这个包的路径)
$ rosnode list
$ rosrun turtlesim turtlesim_node __name:=my_turtle	# ROS的一个强大特性就是你可以通过命令行重新配置名称
$ rosnode cleanup #清除rosnode列表
$ rosnode ping my_turtle 

===================6.理解ROS话题=============================
# rostopic 和 rxplot 
$ roscore	# 新终端
$ rosrun turtlesim turtlesim_node	# 新终端
$ rosrun turtlesim turtle_teleop_key	# 新终端
# 原理：
# - turtlesim_node节点和turtle_teleop_key节点之间是通过一个ROS话题来互相通信的。
# - turtle_teleop_key在一个话题上发布按键输入消息，而turtlesim则订阅该话题以接收该消息。
$ sudo apt-get install ros-<distro>-rqt
$ sudo apt-get install ros-<distro>-rqt-common-plugins
# rqt_graph能够创建一个显示当前系统运行情况的动态图形。rqt_graph是rqt程序包中的一部分
$ rosrun rqt_graph rqt_graph

$ rostopic -h	# rostopic命令工具能让你获取有关ROS话题的信息
$ rostopic echo /turtle1/command_velocity	# rostopic echo [topic]可以显示在某个话题上发布的数据
$ rostopic list 	# 列出所有当前订阅和发布的话题
# -h:帮助文档
# -v:verbose:显示出有关所发布和订阅的话题及其类型的详细信息

-----------ROS Messages---------------------
话题之间的通信是通过在节点之间发送ROS消息实现的。
对于发布器(turtle_teleop_key)和订阅器(turtulesim_node)之间的通信，发布器和订阅器之间必须发送和接收相同类型的消息。这意味着话题的类型是由发布在它上面的消息类型决定的。
$ rostopic type /turtle1/cmd_vel 	#使用rostopic type [topic]命令可以查看发布在某个话题上的消息类型。
$ rosmsg show geometry_msgs/Twist	# 使用rosmsg命令来查看消息的详细情况
---------------------------------------------
$ rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]' 	
# rostopic pub [topic] [msg_type] [args]把数据发布到当前某个正在广播的话题上
# -1:发一条消息后马上退出
# （双破折号）这会告诉命令选项解析器接下来的参数部分`都不是`命令选项。这在参数里面包含有破折号-（比如负号）时是必须要添加的。
$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'
# -r 1:以1Hz的频率发布速度命令到速度话题上

$ rostopic hz /turtle1/pose
# rostopic hz [topic]命令可以用来查看数据发布的频率。
$ rostopic type /turtle1/cmd_vel | rosmsg show
# 结合rostopic type和rosmsg show命令来获取关于某个话题的更深层次的信息

--------------------可视化工具-数据变化-------------------------
# 1.rqt_plot命令可以实时显示一个发布到某个话题上的数据变化图形。这里我们将使用rqt_plot命令来绘制正在发布到/turtle1/pose话题上的数据变化图形。首先，在一个新终端中运行rqt_plot命令
$ rosrun rqt_plot rqt_plot
# 2.这会弹出一个新窗口，在窗口左上角的一个文本框里面你可以添加需要绘制的话题。在里面输入/turtle1/pose/x后之前处于禁用状态的加号按钮将会被使能变亮。按一下该按钮，并对/turtle1/pose/y重复相同的过程。现在你会在图形中看到turtle的x-y位置坐标图。
# 3.按下减号按钮会显示一组菜单让你隐藏图形中指定的话题。现在隐藏掉你刚才添加的话题并添加/turtle1/pose/theta 

=====================7.理解ROS服务和参数==================
# rosservice 和 rosparam
ROS Services：
服务（services）是节点之间通讯的另一种方式。服务允许节点发送请求（request） 并获得一个响应（response）

- rosservice可以很轻松的使用`ROS 客户端/服务器框架`提供的服务。
- rosservice提供了很多可以在topic上使用的命令
$ rosservice list	#输出可用服务的信息
# 重置（reset）, 清除（clear）, 再生（spawn）, 终止（kill）,rosout节点提供的服务: /rosout/get_loggers and /rosout/set_logger_level. 
$ rosservice type clear	#rosservice type [service],命令更进一步查看clear服务(rosservice type输出服务类型)
# 服务的类型为空（empty),这表明在调用这个服务是不需要参数（比如，请求不需要发送数据，响应也没有数据）
$ rosservice call clear  #调用无参数/带参数的服务,rosservice call [service] [args]

$ rosservice type spawn | rossrv show
$ rosservice call spawn 2 2 0.2 ""	# 带参数的服务
#rosservice find         依据类型寻找服务find services by service type
#rosservice uri          输出服务的ROSRPC uri
-----------------------------------------------
- rosparam使得我们能够存储并操作`ROS参数服务器（Parameter Server）`上的数据。参数服务器能够存储整型、浮点、布尔、字符串、字典和列表等数据类型。
- rosparam使用YAML标记语言的语法。一般而言，YAML的表述很自然：1 是整型, 1.0 是浮点型, one是字符串, true是布尔, [1, 2, 3]是整型列表, {a: b, c: d}是字典. 

$ rosparam list           #列出参数名
$ rosparam set background_r 150			#设置参数,rosparam set [param_name]
$ rosservice call clear		#调用清除服务使得修改后的参数生效
$ rosparam get background_g	#获取参数,rosparam get [param_name]           
$ rosparam get /		#来显示参数服务器上的所有内容
$ rosparam delete         #删除参数

$ rosparam dump params.yaml	#向文件中写入参数,rosparam dump [file_name]
#将yaml文件重载入新的命名空间，比如说copy空间
$ rosparam load params.yaml copy	#从文件读取参数,rosparam load [file_name] [namespace]
$ rosparam get copy/background_b	

=================8.使用rqt_console和roslaunch================
# rqt_console和rqt_logger_level、roslaunch
# 预先安装rqt和turtlesim程序包
$ sudo apt-get install ros-<distro>-rqt ros-<distro>-rqt-common-plugins ros-<distro>-turtlesim
 
# rqt_console属于ROS日志框架（logging framework）的一部分，用来显示节点的输出信息。
# rqt_logger_level允许我们修改节点运行时输出信息的日志等级（logger levels）(包括DEBUG\WARN\INFO\ERROR)
$ rosrun rqt_console rqt_console
$ rosrun rqt_logger_level rqt_logger_level
$ rosrun turtlesim turtlesim_node	# 新终端打开
# 默认日志等级是`INFO`
$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0,0.0,0.0]' '[0.0,0.0,0.0]'

# 日志等级的优先级排序：Fatal > Error > Warn > Info > Debug
# 通过设置日志等级可以获取该等级及其以上优先等级的所有日志消息
--------------------------------------------------------
# roslaunch [package] [filename.launch],可以用来启动定义在launch文件中的多个节点

$ roscd beginner_tutorials
# 执行失败的话，设置当前终端下的ROS_PACKAGE_PATH环境变量
$ export ROS_PACKAGE_PATH=/home/jlurobot/catkin_ws/src:$ROS_PACKAGE_PATH
$ roscd beginner_tutorials
$ mkdir launch
$ cd launch
`turtlemimic.launch文件解读:`
# 创建一个名为turtlemimic.launch的launch文件并复制粘贴以下内容到该文件里面
# <launch>: 该标签表示文件类型
# <group ns="1">:不同节点以命名空间标签来区分
# <node pkg="turtlesim">:同时打开两个turtlesim模拟器而不会产生命名冲突
# <remap from="" to="">:启动节点，并将所有话题的输入和输出分别重命名为turtlesim1和turtlesim2，这样2会模仿1
$ roslaunch beginner_tutorials turtlemimic.launch
$ rostopic pub /turtlesim1/turtle1/cmd_vel  geometry_msgs/Twist -r 1 -- '[2.0,0.0,0.0]' '[0.0,0.0,-1.8]'		# 新终端输入，只给一个节点发消息，但模仿节点也会跟着动
$ rqt_graph
====================9.使用rosed编辑ROS中的文件======================
# rosed
rosed 是 rosbash 的一部分。利用它可以直接通过package名来获取到待编辑的文件而无需指定该文件的存储路径了。
$ rosed roscpp Logger.msg	# rosed [package_name] [filename],编辑roscpp package里的Logger.msg文件
# - 默认编辑器为vim，如果该实例没有运行成功，那么很有可能是你没有安装vim编辑器。
$ export EDITOR='emacs -nw'	# 在~/.bashrc文件中添加该语句，设置其他默认编辑器，只在新终端有效
$ echo $EDITOR		# 新终端打开,查看EDITOR定义
# - 如果文件名在package里不是唯一的，那么会呈现出一个列表，让你选择编辑哪一个文件。 
# - filename可用Tab键补全
======================10.创建ROS消息和ROS服务====================
# rosmsg, rossrv和roscp
- 消息(msg): msg文件就是一个描述ROS中所使用消息类型的简单文本。它们会被用来生成不同语言的源代码。
- 服务(srv): 一个srv文件描述一项服务。它包含两个部分：请求和响应。
- msg文件存放在package的msg目录下，srv文件则存放在srv目录下。 
- msg文件实际上就是每行声明一个数据类型和变量名。可以使用的数据类型如下：

    + int8, int16, int32, int64 (plus uint*)
    + float32, float64
    + string
    + time, duration
    + other msg files
    + variable-length array[] and fixed-length array[C] 
    + Header(在ROS中有一个特殊的数据类型，它含有时间戳和坐标系信息。在msg文件的第一行经常可以看到Header header的声明.) 
- srv文件分为请求和响应两部分，由'---'分隔。

---------------------使用msg--------------------------
# 1.创建msg文件
$ cd ~/catkin_ws/src/beginner_tutorials
$ mkdir msg
$ echo "int64 num" > msg/Num.msg
# 确保msg文件被转成为其他语言的源代码
# 2.查看package.xml，确保包含以下两句：
<build_depend>message_generation</build_depend>
<exec_depend>message_runtime</exec_depend>
# 3.在CMakeLists.txt文件中，使用find_package，增加对message_generation的依赖
[--------CMakeLists.txt---------]
# Do not just add this line to your CMakeLists.txt, modify the existing line
find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)

catkin_package(
  ...
  CATKIN_DEPENDS message_runtime ...
  ...)

add_message_files(
  FILES
  Num.msg
)

generate_messages()
[--------CMakeLists.txt---------]
# 4.使用rosmsg
$ rosmsg show beginner_tutorials/Num	# rosmsg show [message type]检查ROS是否能够识消息。
# beginner_tutorials:消息所在的package，忘记了可以忽略
# Num:消息名Num
$ rosmsg show Num

-------------------------使用srv----------------------
# 1.创建srv文件
$ cd ~/catkin_ws/src/beginner_tutorials
$ mkdir srv
# 2.创建新服务或复制一个服务
$ roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv	# roscp [package_name] [file_to_copy_path] [copy_path]实现了将文件从一个package复制到另外一个package的功能
# 3.确保srv文件被转换成C++，Python和其他语言的源代码
[--------CMakeLists.txt---------]
# Do not just add this line to your CMakeLists.txt, modify the existing line
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  message_generation)
# 对的, message_generation 对msg和srv都起作用
add_service_files(
  FILES
  AddTwoInts.srv
)
[--------CMakeLists.txt---------]
# 4.使用rossrv
$ rossrv show beginner_tutorials/AddTwoInts	# rossrv show <service type>检查ROS是否能够识该服务。
$ rossrv show AddTwoInts
-----------------------msg和srv都需要的步骤------------------
[--------CMakeLists.txt---------]
generate_messages(
  DEPENDENCIES
  std_msgs
)
[--------CMakeLists.txt---------]
# 重新编译package
$ cd ../..
$ catkin_make
$ cd -
[所有在msg路径下的.msg文件都将转换为ROS所支持语言的源代码。生成的C++头文件将会放置在~/catkin_ws/devel/include/beginner_tutorials/。 Python脚本语言会在 ~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg 目录下创建。 lisp文件会出现在 ~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/ 路径下]
# -h:大多数指令后加-h可以获取参数和命令的帮助

详尽的消息格式msg请参考:http://wiki.ros.org/action/show/msg?action=show&redirect=ROS%2FMessage_Description_Language
=================11.编写简单的消息发布器和订阅器(c++)=============
参考：http://wiki.ros.org/cn/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29

- 『节点』(Node) 是指 ROS 网络中可执行文件。
# 创建一个发布器节点("talker")，它将不断的在 ROS 网络中广播消息。 
$ cd ~/catkin_ws/src/beginner_tutorials
# 详细内容见src/talker.cpp和src/listener.cpp的注释
# 修改CMakeLists.txt和package.xml
$ cd ../..
$ catkin_make  
=================12.编写简单的消息发布器和订阅器(python)=============
# python：http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29
====================13.测试消息发布器和订阅器================
----------------启动发布器--------------------
$ roscore
# [catkin specific:如果使用catkin，确保你在调用catkin_make后，在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件]
$ cd ~/catkin_ws
$ source ./devel/setup.bash
$ rosrun beginner_tutorials talker      # (C++)
$ rosrun beginner_tutorials talker.py   # (Python) 
----------------启动订阅器--------------------
$ rosrun beginner_tutorials listener    # (C++)
$ rosrun beginner_tutorials listener.py # (Python) 

===============14.编写简单的服务器和客户端（c++）=============
# 1.设置服务
$ cd ~/catkin_ws/src/beginner_tutorials
# 请确保已经按照creating the AddTwoInts.srv教程的步骤创建了本教程所需要的srv（确保选择了对应的编译系统“catkin”和“rosbuild”）
# 2.编写service节点
# 在beginner_tutorials包中创建src/add_two_ints_server.cpp文件，并复制粘贴下面的代码:http://wiki.ros.org/cn/ROS/Tutorials/WritingServiceClient%28c%2B%2B%29
# 3.编写Client节点
# 在beginner_tutorials包中创建src/add_two_ints_client.cpp文件，并复制粘贴下面的代码
# 4.编译节点
[--------CMakeLists.txt---------]
add_executable(add_two_ints_server src/add_two_ints_server.cpp)
target_link_libraries(add_two_ints_server ${catkin_LIBRARIES})
add_dependencies(add_two_ints_server beginner_tutorials_gencpp)
 
add_executable(add_two_ints_client src/add_two_ints_client.cpp)
target_link_libraries(add_two_ints_client ${catkin_LIBRARIES})
add_dependencies(add_two_ints_client beginner_tutorials_gencpp)
[--------CMakeLists.txt---------]
===============15.编写简单的服务器和客户端（python）=============
http://wiki.ros.org/cn/ROS/Tutorials/WritingServiceClient%28python%29
=================16.测试简单的服务器和客户端===================
----------------运行服务器--------------------
$ roscore
# [catkin specific:如果使用catkin，确保你在调用catkin_make后，在运行你自己的程序前，已经source了catkin工作空间下的setup.sh文件]
$ cd ~/catkin_ws
$ source ./devel/setup.bash
$ rosrun beginner_tutorials add_two_ints_server     # C++
$ rosrun beginner_tutorials add_two_ints_server.py  # Python
----------------运行客户端--------------------
$ rosrun beginner_tutorials add_two_ints_client 1 3     # C++
$ rosrun beginner_tutorials add_two_ints_client.py 1 3  # Python
=================17.录制与回放数据===================
# rosbag
# 录制数据（通过创建一个bag文件）
$ roscore
$ rosrun turtlesim turtlesim_node 
$ rosrun turtlesim turtle_teleop_key
$ rostopic list -v
# 1.录制所有发布的话题
$ mkdir ~/carkin_ws/bagfiles
$ cd ~/catkin_ws/bagfiles
$ rosbag record -a
# -a:表示将当前发布的所有话题数据都录制保存到一个bag文件中。
# 运行rosbag record命令的窗口中按Ctrl-C退出该命令
$ rosbag info <your bagfile>	# 检查看bag文件中的内容
$ rosbag play <your bagfile>	# 回放数据
# 默认模式下，rosbag play命令在公告每条消息后会等待一小段时间（0.2秒）后才真正开始发布bag文件中的内容。等待一段时间的过程可以通知消息订阅器消息已经公告了消息数据可能会马上到来。如果rosbag play在公告消息后立即发布，订阅器可能会接收不到几条最先发布的消息。
# -d:指定等待时间
$ rosbag play -r 2 <your bagfile>
# -r:允许通过设定一个参数来改变消息发布速率
# 2.录制数据子集
$ rosrun turtlesim turtlesim_node 
$ rosrun turtlesim turtle_teleop_key
$ rosbag record -O subset /turtle1/command_velocity /turtle1/pose
# -O:将数据记录保存到名为subset.bag的文件中
# 话题参数:只能录制/turtle1/command_velocity、/turtle1/pose这两个指定的话题。
=================18.roswtf入门===================
# roswtf
# 1.安全检查：roswtf 可以检查你的ROS系统并尝试发现问题
$ roscd
$ roswtf
# "Static checks summary": 这是有关文件系统问题的检查报告，现在的检查结果表示文件系统没问题。 
# "Cannot communicate with master, ignoring graph checks（无法与master连接，忽略图（graph）检查）"
# roscore运行后，roswtf做运行时检查。
# roswtf发出警告说rosout节点订阅了一个没有节点向其发布的话题。在本例中，这正是所期望看到的，因为除了roscore没有任何其它节点在运行，所以我们可以忽略这些警告。 
# 如果你发现自己被一个编译或者通信之类的问题困扰的时候，可以尝试运行roswtf看能否帮你解决。 
=================19.探索ROS维基===================
=================20.进一步===================
# 1.使用模拟器
# 你可以从PR2 模拟器 或者 Turtlebot 模拟器入手。还可以搜索一台机器人并查看它是否提供了自己的模拟器。
# 现在你可能会尝试使用'teleop'程序包（package）来控制模拟的机器人（比如：turtlebot_teleop）或者运用你掌握的知识来查看话题(topic)，编写程序发布恰当的消息来驱动你的机器人。
# 2.使用 RViz
# RViz是一款强大的可视化工具，它允许你查看机器人中的传感器和内部状态。rviz用户指南会教你如何使用。
# 3.理解 TF
# TF程序包（package）提供在机器人所使用到的各种坐标系之间的变换功能，并保持跟踪这些变换的变化。当你使用任何真实的机器人时理解好TF是必不可少的，所以学习TF相关的教程是值得的。
# 4.如果你正在打造一台你自己的机器人，此刻你可能会考虑给你的机器人设计一个URDF 模型。如果你正在用的是一台“标配”的机器人，可能已经有人帮你设计好了。不过，你可能依然值得去简单了解一下URDF程序包（package）。
# 5.actionlib - actionlib 程序包（package）为可抢占式的任务提供一个标准接口，并广泛应用在ROS中的“高层次”程序包（packages）中。
# 6.navigation - 2D 导航: 绘图及路径规划。
# 7.MoveIt - 用来控制机器人的手臂. 
****************ROS指令汇总***************
- roscore = ros+core : master (provides name service for ROS) + rosout 
(stdout/stderr) + parameter server (parameter server will be introduced
later)
- rosnode = ros+node : ROS tool to get information about a node.
- rosrun = ros+run : runs a node from a given package.
- rospack = ros+pack(age) : provides information related to ROS packages
- rosstack = ros+stack : provides information related to ROS stacks
- roscd = ros+cd : changes directory to a ROS package or stack
- rosls = ros+ls : lists files in a ROS package
- roscp = ros+cp : copies files from/to a ROS package
- rosmsg = ros+msg : provides information related to ROS message definitions
- rossrv = ros+srv : provides information related to ROS service definitions
- rosmake = ros+make : makes (compiles) a ROS package /被catkin_make取代
- rostopic= ros+topic
******************************************

rosbag数据解码～
https://blog.csdn.net/lanyuxuan100/article/details/69988779
# 1.首先，查看.bag文件信息
$ rosbag info **.bag
# 2.然后，根据上面信息修改export.launch文件
# 如下图中红色部分所示，第一处红框即上面那个，指定bag文件的位置，第二次红框即下面那个指定解码的具体主题，对应上面图中的topics中内容。
# 3.解码
$ roslaunch export.launch
# 4.查看结果,解码生成的图像存在~/.ros目录中

--------------------------------------------------------
bag包提取数据
图像：image_analysis.py
txt：https://blog.csdn.net/jmzlzl/article/details/82775217
#.bag文件转.txt
#将file_name.bag文件中topic_name话题的消息转换到Txt_name.txt文件中：
$ rostopic echo -b file_name.bag -p /topic_name > Txt_name.txt

---------------------------------------------------
同一个节点订阅和发布不同话题：https://blog.csdn.net/heyijia0327/article/details/45567373
---------------------------------------------------
ROS自定义msg类型以及使用:https://blog.csdn.net/u012319441/article/details/78309781?utm_source=blogxgwz7
---------------------------------------------------
roslaunch多文件及顺序控制启动：https://blog.csdn.net/sxh_1102/article/details/84660850
方法一：编写shell文件控制启动顺序
1.说明
在catkin workspace中，比如src文件夹下有三个pkg，分别为rb_gazebo,rb_describtion,rb_control
2.编写脚本文件multi_launch.sh
[-----------------multi_launch.sh------------------]
#!/bin/bash 

roslaunch rb_gazebo rb_world.launch &
sleep 1
echo "launch rb_gazebo successfully"

roslaunch rb_description rb_rviz.launch &
sleep 1
echo "launch rb_rviz successfully"

roslaunch rb_control rb_control.launch &
echo "launch rb_control successfully"

roslaunch rb_control rb_rqt.launch &
echo "launch rb_rqt successfully"

wait
exit 0
[-----------------multi_launch.sh------------------]
3.执行
$ catkin_make
$ source devel/setup.bash    #不要忘记
$ chmod a+x multi_launch.sh
$ ./multi_launch.sh

-------------------launch文件-----------------------
https://www.cnblogs.com/ChrisCoder/p/9949643.html
在launch文件中启动其他launch文件：
<include file="$(find packagexx)/launch/111.launch" />
-------------------topic name-----------------------
原文：https://blog.csdn.net/ethan_guo/article/details/80262650 
更改话题名：
1.某个节点订阅或者发布的消息名想换一下，可以通过launch文件的remap功能。【例子】

2.改变bag文件里的消息名称。比如我有个bag文件，有个topic我想改个名字适应我的源码，可以这样做：

rosbag play file.bag /foo:=/bar    #/foo是原topic，/bar是新topic
--------------------ros时间戳的问题---------------
1.同时播放两个bag，从最早的时间戳开始
--------------------ros主从机使用----------------
wifi：https://www.jianshu.com/p/5ff453cb994e
直连：https://www.jianshu.com/p/bfe7de34deb4
# 查看ip地址
$ ifconfig
# 查看主机名称
$ hostname
# 1.更改名称，主机master-ubuntu01，从机slave-ubuntu01
$ sudo vim /etc/hostname
# add -->> master-ubuntu01	#中间Tab
# 2.配置电脑及虚拟机的ip地址
ubuntu端口各自为不同的ip地址，两个ubuntu需在相同的网关下。
master：
ubuntu端： 网络设置--eth0或wiredconnection---edit---ipv4设置---add--《192.168.2.22》《255.255.255.0》《192.168.2.1》
slave：
ubuntu端： 网络设置--eth0或wiredconnection---edit---ipv4设置---add--《192.168.2.11》《255.255.255.0》《192.168.2.1》
测试：
$ ping 192.168.2.* 	# 更换其他ip都成功则配置ok
# 3.配置ubuntu系统中hosts
$ sudo vim /etc/hosts
example：
127.0.0.1 localhost   （中间是tab）
127.0.1.1   master-ubuntu01  （hostname）
192.168.2.22    master-ubuntu01
192.168.2.11    slave-ubuntu01
相同的配置好其他系统中的hosts
测试：
#ping hostname 
$ ping slave-ubuntu01
# 4.设置默认环境变量
sudo vim ~/.bashrc
master-ubuntu01：
export ROS_HOSTNAME=master-ubuntu01
export ROS_MASTER_URI=http://master-ubuntu01:11311
其中设置ROS_MASTER_URI中的地址即为主机的地址。可以roscore开启总的节点服务器。
slave-ubuntu01：
export ROS_HOSTNAME=slave-ubuntu01
export ROS_MASTER_URI=http://master-ubuntu01:11311
其中设置本机hostname为slave-ubuntu01，以master-ubuntu01的主机运行节点。
# 5.运行测试
master-ubuntu01：
roscore
rosrun turtlesim turtlesimnode
slave-ubuntu01：
rosrun turtlesim turtle_teleop_key
运行ubuntu0074的键盘即可操控ubuntu0556中的海龟运动了。
*注：
若想以slave-ubuntu01作主机 只需要将两台机器的环境变量改为export ROS_MASTER_URI=http://slave-ubuntu01:11311
在slave-ubuntu01中运行roscore

------------！！！！！常见错误！！！！！---------------------
运行roscore出现以下错误
RLException: roscore cannot run as another roscore/master is already running. 
Please kill other roscore/master processes before relaunching.
The ROS_MASTER_URI is http://WL2TX-003:11311/
The traceback for the exception was written to the log file
解决方法：
$ ps aux|grep roscore
$ killall -9 roscore
$ killall -9 rosmaster

+++++++++++++++++++++++++
ERROR: Cannot load message class for [radar_target/myEsrTrack]. Are your messages built?
解决：
必须在新打开的Terminal里source workspace下的devel/setup.bash，否则就会在试图rostopic echo自己定义的topic的时候出现这样的错误。
$ cd ~/catkin_ws
$ source devel/setup.bash
$ rostopic echo /[你的topic]
+++++++++++++++++++++++++
[FATAL] [1552470768.051222]: Could not open serial port: I/O error(2): could not open port /dev/ttyUSB0: [Errno 2] No such file or directory: '/dev/ttyUSB0'  
解决：sudo chmod 666 /dev/ttyUSB0
+++++++++++++++++++++++++
[FATAL] [1552808749.431894152]: ASSERTION FAILED
        file = /opt/ros/melodic/include/ros/publisher.h
        line = 69
        cond = false
        message = 
[FATAL] [1552808749.434244006]: Call to publish() on an invalid Publisher
[FATAL] [1552808749.434314149]: 

[image_publisher-7] process has died [pid 108520, exit code -5, cmd /home/jlurobot/fusion_ws/fusion-tracking/devel/lib/radart_bbox/bbox_estimate __name:=image_publisher __log:=/home/jlurobot/.ros/log/4dfeaa1e-4862-11e9-a7cb-a4bf010c634d/image_publisher-7.log].
log file: /home/jlurobot/.ros/log/4dfeaa1e-4862-11e9-a7cb-a4bf010c634d/image_publisher-7*.log
解决：publisher没有正确初始化
++++++++++++++++++++++++++++++++++++
F0318 15:07:37.460444 15122 io.cpp:45] Check failed: fd != -1 (-1 vs. -1) File not found: /home/jlurobot/GitLabSync/fusion-tracking/model/deploy.prototxt
解决：将/home/jlurobot/GitLabSync/fusion-tracking/model/deploy.prototxt的绝对地址修改
++++++++++++++++++++++++++++++++++++
使用message_filters作同步时报错：undefined reference to `message_filters::Connection::disconnect()'
解决：CMakeLists.txt或package.xml中缺少包含tf或message_filters
++++++++++++++++++++++++++++++++++++
Warning: TF_OLD_DATA ignoring data from the past for frame base_link at time 0 according to authority unknown_publisher
Possible reasons are listed at http://wiki.ros.org/tf/Errors%20explained
         at line 277 in /tmp/binarydeb/ros-melodic-tf2-0.6.5/src/buffer_core.cpp
解决：
  TF_OLD_DATA errors mean that a transform is attempted to be added to the system, but the data is greater than cache_time_ before the most recent data received for this link.
- The most common cause of TF_OLD_DATA warnings are if rostime has gone backwards. This can be caused by restarting a bag playback or restarting a simulator. The fix for this is to send an Empty message the topic /reset_time. There is a button in rviz to do this.
- Another possible source of TF_OLD_DATA is if there is any outdated or delayed source of transforms. The error message will tell you which authority is sending the outdated data. If it is running in a ros node you can use view_frames to determine the more recent authority. See view_frames. 








